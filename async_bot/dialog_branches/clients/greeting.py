from aiogram import types, Dispatcher, md
from aiogram.dispatcher import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from async_bot.dialog_branches.clients.questionnaire import make_order
from async_bot.dialog_branches.clients.states import FSMGreeting
from async_bot.dialog_branches.utils import get_number, create_keyboard_inline, Button, callback_data_leave_order
from async_bot.filters.NotCommandFilter import NotCommandFilter
from database.crud import *
from email_validator import validate_email, EmailNotValidError


async def greeting_name(message: types.Message, session: AsyncSession, user: User):
    user.name = message.text
    await update_user(user, session)

    await FSMGreeting.next()
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {md.quote_html(user.name)}, —Ä–∞–¥ —Å –í–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!")
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏")


async def greeting_phone_number(message: types.Message, session: AsyncSession, user: User):
    phone_number = get_number(message.text)

    if phone_number is not None:
        user.phone_number = phone_number.national_number
        await update_user(user, session)

        await FSMGreeting.next()
        await message.answer("–Ø –±—ã–ª –±—ã –æ—á–µ–Ω—å —Ä–∞–¥, –µ—Å–ª–∏ –í—ã –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –ø–æ—á—Ç–æ–π üòä\n"
                             "–ù–æ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ <b>–ù–µ—Ç</b>.")
    else:
        await message.answer("–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —Ç–∞–∫–∏—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –±—ã–≤–∞–µ—Ç.\n\n"
                             "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º üòä")


async def greeting_email(message: types.Message, state: FSMContext, session: AsyncSession, user: User):
    if '@' in message.text:
        try:
            email = validate_email(message.text).email

            user.email = email
            await update_user(user, session)
        except EmailNotValidError:
            await message.answer("–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —Ç–∞–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ –±—ã–≤–∞–µ—Ç.\n\n"
                                 "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º üòä")
            return

    await state.finish()
    await message.answer("–•–æ—Ä–æ—à–æ! –ú–Ω–µ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –í–∞—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!")
    await message.answer("–í—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?", reply_markup=create_keyboard_inline(
        [Button("–î–∞", callback_data_leave_order.new(answer="yes")),
         Button("–ù–µ—Ç", callback_data_leave_order.new(answer="no"))]
    ))

    await make_order(message, state)


async def callback_leave_order_yes(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup()

    await make_order(callback.message, state)


async def callback_leave_order_no(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.delete_reply_markup()

    await callback.message.answer("–•–æ—Ä–æ—à–æ, –æ–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ—Å—å! –Ø –±—É–¥—É –∂–¥–∞—Ç—å –í–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è! –î–æ –≤—Å—Ç—Ä–µ—á–∏!")


def register_greeting(dp: Dispatcher):
    dp.register_message_handler(greeting_name, NotCommandFilter(), state=FSMGreeting.name)
    dp.register_message_handler(greeting_phone_number, NotCommandFilter(), state=FSMGreeting.phone_number)
    dp.register_message_handler(greeting_email, NotCommandFilter(), state=FSMGreeting.email)

    dp.register_callback_query_handler(callback_leave_order_yes, callback_data_leave_order.filter(answer="yes"))
    dp.register_callback_query_handler(callback_leave_order_no, callback_data_leave_order.filter(answer="no"))
