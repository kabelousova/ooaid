import datetime

from aiogram import types, Dispatcher, md
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove, ContentType
from speech_recognition import UnknownValueError
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from async_bot.dialog_branches.clients.states import FSMPoll, FSMVoice
from async_bot.dialog_branches.utils import create_keyboard_inline, callback_data_order, Button, \
    callback_data_make_order, create_keyboard_reply, convert_voice
from async_bot.filters.NegativeAnswer import NegativeAnswer
from async_bot.filters.NotCommandFilter import NotCommandFilter
from database.crud import update_order
from database.models import User, Order

yes_no_keyboard = create_keyboard_reply(["–î–∞", "–ù–µ—Ç"])


async def make_order(message: types.Message, state: FSMContext):
    await state.finish()

    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞–≤ –æ –≤–∞—à–∏—Ö –ø–ª–∞–Ω–∞—Ö –Ω–∞ –æ—Ç–¥—ã—Ö. "
                         "–ò–ª–∏ –∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å.",
                         reply_markup=create_keyboard_inline(
                             [Button("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data_make_order.new(type="voice")),
                              Button("–û–ø—Ä–æ—Å", callback_data_make_order.new(type="poll"))
                              ]
                         ))


async def voice_start(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.delete_reply_markup()

    await callback.message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ, –∫–∞–∫ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–≤–æ–π –æ—Ç–¥—ã—Ö.\n"
                                  "–í–æ–∑–º–æ–∂–Ω–æ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Ç–æ—á–Ω–µ–µ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–¥—ã—Ö:\n\n"
                                  "  üëâ –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–¥—ã—Ö? üìÖ\n"
                                  "  üëâ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥—ã—Ö? üè°\n"
                                  "  üëâ –°–∫–æ–ª—å–∫–æ –≤–∞—Å —á–µ–ª–æ–≤–µ–∫? –í–∑—Ä–æ—Å–ª—ã—Ö, –¥–µ—Ç–µ–π? üë®‚Äçüë©‚Äçüëß\n"
                                  "  üëâ –£–∂–µ –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–µ–ª—å? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–æ–π?\n"
                                  "  üëâ –ù—É–∂–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∏–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞?üöå\n"
                                  "  üëâ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞?\n"
                                  "  üëâ –õ—é–±—ã–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è",
                                  reply_markup=ReplyKeyboardRemove())

    await FSMVoice.voice.set()


async def get_voice(message: types.Message, state: FSMContext, session: AsyncSession, user: User):
    voice = (await message.voice.get_file())

    try:
        about_order = await convert_voice(voice, message.bot)

        await message.answer(
            "–°–ø–∞—Å–∏–±–æ, —É–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –í–∞—à–∏–º –æ—Ç–¥—ã—Ö–æ–º –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø—Ä–∞–≤–ª—é –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã! –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
        await state.finish()

        order = Order(user_id=user.chat_id,
                      about_order=about_order,
                      create_date=datetime.datetime.utcnow())

        await update_order(order, session)

        order_text = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{md.quote_html(user.username)} –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É:\n"
                      f"   –ò–º—è: {md.quote_html(user.name)}\n"
                      f"   –¢–µ–ª–µ—Ñ–æ–Ω: {md.quote_html(user.phone_number)}\n"
                      f"   –ü–æ—á—Ç–∞: {md.quote_html(user.email)}\n\n"
                      f"–û –∑–∞—è–≤–∫–µ:\n" + about_order)

        query = select(User).filter(User.role == "Worker")

        workers = (await session.execute(query)).scalars()

        for worker in workers:
            await message.bot.send_message(worker.chat_id, order_text,
                                           reply_markup=create_keyboard_inline(
                                               [Button("–í–∑—è—Ç—å –∑–∞—è–≤–∫—É",
                                                       callback_data_order.new(id=order.order_id, action="take"))]
                                           ))
            await message.forward(worker.chat_id)
    except UnknownValueError:
        await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def poll_place(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.delete_reply_markup()

    await FSMPoll.place.set()
    await callback.message.answer("–ì–¥–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å? ‚õ∞", reply_markup=ReplyKeyboardRemove())


async def poll_time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["place"] = message.text

    await FSMPoll.next()
    await message.answer("–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–¥—ã—Ö? –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ üìÜ")


async def poll_duration(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["time"] = message.text

    await FSMPoll.next()
    await message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–µ–¥–µ—Ç–µ?")


async def poll_number_of_person(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["duration"] = message.text

    await FSMPoll.next()
    await message.answer("–°–∫–æ–ª—å–∫–æ –í–∞—Å —á–µ–ª–æ–≤–µ–∫: –≤–∑—Ä–æ—Å–ª—ã—Ö, –¥–µ—Ç–µ–π? üë®‚Äçüë©‚Äçüëß")


async def poll_hotel(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["number_of_person"] = message.text

    await FSMPoll.next()
    await message.answer("–£–∂–µ –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–µ–ª—å?\n"
                         "üè° –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–æ–π?")


async def poll_hotel_details(message: types.Message):
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –í–∞—à–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö –∫ –æ—Ç–µ–ª—é.")


async def poll_transfer(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["hotel"] = message.text

    await FSMPoll.next()
    await message.answer("–£–∂–µ —Ä–µ—à–∏–ª–∏, –∫–∞–∫ –±—É–¥–µ—Ç–µ –¥–æ–±–∏—Ä–∞—Ç—å—Å—è?\n"
                         "üöå –ù—É–∂–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä?", reply_markup=yes_no_keyboard)


async def poll_transfer_details(message: types.Message):
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –í–∞—à–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö –∫ –æ—Ç–µ–ª—é.")


async def poll_wishes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['transfer'] = message.text

    await FSMPoll.next()
    await message.answer("–ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è? –ú–æ–∂–µ—Ç —è –Ω–µ —Å–ø—Ä–æ—Å–∏–ª –ø—Ä–æ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –¥–ª—è –í–∞—Å?",
                         reply_markup=ReplyKeyboardRemove())


async def poll_final(message: types.Message, state: FSMContext, session: AsyncSession, user: User):
    async with state.proxy() as data:
        data["wishes"] = message.text

    await state.finish()
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, —É–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –í–∞—à–∏–º –æ—Ç–¥—ã—Ö–æ–º –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø—Ä–∞–≤–ª—é –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã! –î–æ –≤—Å—Ç—Ä–µ—á–∏!")

    about_order = (f"   –ú–µ—Å—Ç–æ –ø–æ–µ–∑–¥–∫–∏: {data['place']}\n"
                   f"   –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {data['time']}\n"
                   f"   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']}\n"
                   f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω: {data['number_of_person']}\n"
                   f"   –û—Ç–µ–ª—å: {data['hotel']}\n"
                   f"   –¢—Ä–∞–Ω—Å—Ñ–µ—Ä: {data['transfer']}\n"
                   f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {data['wishes']}\n")

    order = Order(user_id=user.chat_id,
                  about_order=about_order,
                  create_date=datetime.datetime.utcnow())

    await update_order(order, session)

    order_text = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É:\n"
                  f"   –ò–º—è: {user.name}\n"
                  f"   –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
                  f"   –ü–æ—á—Ç–∞: {user.email}\n\n"
                  f"–û –∑–∞—è–≤–∫–µ:\n" +
                  about_order)

    query = select(User).filter(User.role == "Worker")

    workers = (await session.execute(query)).scalars()

    for worker in workers:
        await message.bot.send_message(worker.chat_id, md.quote_html(order_text),
                                       reply_markup=create_keyboard_inline(
                                           [Button("–í–∑—è—Ç—å –∑–∞—è–≤–∫—É",
                                                   callback_data_order.new(id=order.order_id, action="take"))]
                                       ))


def register_questionnaire(dp: Dispatcher):
    dp.register_message_handler(make_order, Text("–ó–∞—è–≤–∫–∞"), chat_type=types.ChatType.PRIVATE)
    dp.register_message_handler(make_order, commands=["order"], chat_type=types.ChatType.PRIVATE, state="*")

    dp.register_callback_query_handler(poll_place, callback_data_make_order.filter(type="poll"), state="*")
    dp.register_callback_query_handler(voice_start, callback_data_make_order.filter(type="voice"), state="*")

    dp.register_message_handler(get_voice, state=FSMVoice.voice, content_types=[ContentType.VOICE])

    dp.register_message_handler(poll_time, NotCommandFilter(), state=FSMPoll.place)
    dp.register_message_handler(poll_duration, NotCommandFilter(), state=FSMPoll.time)
    dp.register_message_handler(poll_number_of_person, NotCommandFilter(), state=FSMPoll.duration)
    dp.register_message_handler(poll_hotel, NotCommandFilter(), state=FSMPoll.number_of_persons)
    dp.register_message_handler(poll_hotel_details, NegativeAnswer(), state=FSMPoll.hotel)
    dp.register_message_handler(poll_transfer, NotCommandFilter(), state=FSMPoll.hotel)
    dp.register_message_handler(poll_transfer_details, Text("–î–∞"), state=FSMPoll.transfer)
    dp.register_message_handler(poll_wishes, NotCommandFilter(), state=FSMPoll.transfer)
    dp.register_message_handler(poll_final, NotCommandFilter(), state=FSMPoll.wishes)
